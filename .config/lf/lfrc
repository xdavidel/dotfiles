# Basic vars
set shell sh
set previewer ~/.local/scripts/preview
set shellopts '-eu'
set ifs "\n"
set scrolloff 10

# cmds/functions
cmd open ${{
    case $(file --mime-type $f -b) in
    	text/troff) man ./ $f;;
      text/*) $EDITOR $fx;;
			image/x-xcf|image/svg+xml) setsid gimp $f >/dev/null 2>&1 & ;;
			image/*) rotdir $f | setsid sxiv -ai >/dev/null 2>&1 & ;;
            image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
            image/svg+xml) display -- $f ;;
            image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | sxiv -aio 2>/dev/null | lf-select ;;
			audio/*) mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f ;;
			video/*) setsid mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f -quiet >/dev/null 2>&1 & ;;
			application/pdf) setsid zathura $fx >/dev/null 2>&1 & ;;
      *) for f in $fx; do setsid $OPENER $f >/dev/null 2>&1 & done;;
    esac
}}

cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

cmd delete_prompt ${{
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/n]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
	set -f
	clear; echo "Move to where?"
	dest="$(cut -d'	' -f2- ~/.config/directories | fzf)" &&
	eval mv -iv $fx $dest &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	set -f
	clear; echo "Copy to where?"
	dest="$(cut -d'	' -f2- ~/.config/directories | fzf)" &&
	eval cp -ivr $fx $dest &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd fullpreview ${{
set -f
	case $(file --mime-type $f -b) in
		audio/*)					mediainfo "$f" | less ;;
		image/*)					drawimg "$f" ;;
		video/*)					CACHE=$(mktemp /tmp/thumb_cache.XXXXX)
												ffmpegthumbnailer -i "$f" -o $CACHE -s 0
												drawimg "$CACHE" && rm "$CACHE" ;;
		inode/*)					ls "$f/" | less ;;
		application/pdf)  pdftotext -l 10 -nopgbrk -q -- "$f" - | less;;
		text/html)				w3m -dump "$f" | less ;;
		text/*)						"$EDITOR" -R "$f" ;;
    *)								file --mime-type "$f" | less ;;
    esac
}}

cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

cmd bulkrename $bulkmv $fs

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --header='Jump to location')"
	if [ -f "$res" ]; then
		cmd="select"
	elif [ -d "$res" ]; then
	  cmd="cd"
	fi
	lf -remote "send $id $cmd \"$res\""
}}

cmd chmod ${{
	echo -n "Mode Bits: "
	read ans

	for file in "$fx"; do
		chmod $ans $file
	done
}}

cmd zip %zip -r "$f.zip" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

cmd unarchive ${{
  case "$f" in
	  *.zip) unzip "$f" ;;
		*.tar.gz) tar -xzvf "$f" ;;
		*.tar.bz2) tar -xjvf "$f" ;;
		*.tar) tar -xvf "$f" ;;
		*) echo -n "Unsupported format" ;;
	esac
}}

# Remove some defaults
map gh
map m
map d
map g
map c

# Movement
map gg top
map G bottom
map gh cd
map gd cd ~/Downloads
map gs cd ~/.local/scripts
map gr cd ~/.local/repo
map gc cd ~/.config

# Bindings
map <esc> unselect
map cw bulkrename
map ch chmod
map dD delete
map dd cut
map D %rm -rf "$f"
map . set hidden!
map r push :rename<space>
map <enter> shell
map R reload
map f fzf_jump
map x $$f
map X !$f
map v fullpreview
map md push %mkdir<space>
map mf push %touch<space>
map C copyto
map M moveto
map o &mimeopen "$f"
map O $mimeopen --ask "$f"

# Archives
map az zip
map at tar
map ag targz
map ab targz
map au unarchive
